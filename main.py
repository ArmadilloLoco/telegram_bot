import logging
import configparser
import telebot as tb
import random
# custom
import packages.handlers as hand
import packages.database as db
import packages.import_words as imp

COMMON_WORDS = 'common_words.csv'
TOKEN = hand.read_ini('telegram', 'token')
bot = tb.TeleBot(TOKEN)

class Command:
    TRAIN = "–ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è üìö"
    ADD = "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"
    DELETE = "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    imp.import_if_empty(COMMON_WORDS)
    db.add_user(user_id, username, first_name, last_name)

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n\n"
        "–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, "
        "–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n\n"
        " * –æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n"
        " * –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n\n"
        "–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è"
    )
    msg = bot.send_message(message.chat.id, welcome_text)
    bot.register_next_step_handler(msg, show_main_menu)

def show_main_menu(message):
    if hasattr(message, 'chat'):
        chat_id = message.chat.id
    else:
        chat_id = message
    markup = tb.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        tb.types.KeyboardButton(Command.TRAIN),
        tb.types.KeyboardButton(Command.ADD),
        tb.types.KeyboardButton(Command.DELETE)
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
@bot.message_handler(func=lambda message: message.text == Command.TRAIN)
def show_random_word(message):
    user_id = message.from_user.id
    words = db.get_all_words(user_id)

    word = random.choice(words)
    correct = word['word_eng']
    russian = word['word_rus']

    choices = list()
    for i in range(3):
        wrong_choice = random.choice(words)
        if wrong_choice['word_eng'] != correct:
            choices.append(wrong_choice['word_eng'])
        else:
            i -= 1
    choices.append(correct)
    random.shuffle(choices)

    markup = tb.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for choice in choices:
        markup.add(tb.types.KeyboardButton(choice))

    bot.send_message(message.chat.id, f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: *{russian}*?", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, check_answer, correct, russian)

def check_answer(message, correct, russian):
    user_answer = message.text.strip()
    if user_answer == correct:
        bot.send_message(message.chat.id, f"‚úÖ –í–µ—Ä–Ω–æ! *{russian}* ‚Äî *{correct}*.", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. *{russian}* ‚Äî *{correct}*.", parse_mode="Markdown")

    show_main_menu(message)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text == Command.ADD)
def add_russian_word(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:")
    bot.register_next_step_handler(msg, add_english_word)

def add_english_word(message):
    russian = message.text.strip()
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    bot.register_next_step_handler(msg, save_user_word, russian)

def save_user_word(message, russian):
    english = message.text.strip()
    user_id = message.from_user.id

    db.add_user_word(user_id, russian, english)
    bot.send_message(message.chat.id, f"‚úÖ –°–ª–æ–≤–æ *{russian} - {english}* –¥–æ–±–∞–≤–ª–µ–Ω–æ!", parse_mode="Markdown")

    show_main_menu(message.chat.id)

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text == Command.DELETE)
def delete_word(message):
    user_id = message.from_user.id
    words = db.get_word(user_id)

    if not words:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.")
        show_main_menu(message.chat.id)
        return

    markup = tb.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for word in words:
        markup.add(f"{word['word_rus']} ‚Üí {word['word_eng']}")

    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, confirm_delete)


def confirm_delete(message):
    text = message.text.strip()
    try:
        russian, english = text.split(" ‚Üí ")
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ª–æ–≤–∞.")
        show_main_menu(message.chat.id)
        return

    user_id = message.from_user.id
    success = db.delete_user_word(user_id, russian, english)

    if success:
        bot.send_message(message.chat.id, f"üóë –°–ª–æ–≤–æ *{russian} - {english}* —É–¥–∞–ª–µ–Ω–æ.", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ.")

    show_main_menu(message.chat.id)

if __name__ == '__main__':
    bot.polling()
